{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nmotor_7 = Motor(Ports.PORT7, False)\nmotor_12 = Motor(Ports.PORT12, True)\nfrontleft = Bumper(Ports.PORT3)\nfrontright = Bumper(Ports.PORT4)\nrightfront = Bumper(Ports.PORT9)\nrightback = Bumper(Ports.PORT10)\n\n\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n    \n# Initialize random seed \ninitializeRandomSeed()\n\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nnumberofcorners = 0\nnumber1 = 0\nnumber2 = 0\nnumber3 = 0\nnumber4 = 0\nmessage1 = Event()\nmessage2 = Event()\nfoundacorner = False\n\ndef one_of_my_finest_creations_3():\n    global numberofcorners, number1, number2, number3, number4, message1, message2, foundacorner, vexcode_brain_precision, vexcode_console_precision\n    brain.screen.clear_row(1)\n    brain.screen.set_cursor(brain.screen.row(), 1)\n    brain.screen.print(\"Phase 3: TURN DA CORNER\")\n    motor_7.spin_for(REVERSE, 1, TURNS)\n    motor_12.spin_for(REVERSE, 1, TURNS)\n    motor_12.spin_for(FORWARD, 1, TURNS)\n\ndef one_of_my_finest_creations_2():\n    global numberofcorners, number1, number2, number3, number4, message1, message2, foundacorner, vexcode_brain_precision, vexcode_console_precision\n    brain.screen.clear_row(1)\n    brain.screen.set_cursor(brain.screen.row(), 1)\n    brain.screen.print(\"Phase 2: FOLLOW DA FENCE\")\n    # rename number and myvariable, give functional names\n    # it looks like the 2 variables can be merged into 1\n    foundacorner = False\n    motor_7.set_position(0, DEGREES)\n    # AND works because machine will turn automatically.\n    while not (frontleft.pressing() and frontright.pressing()):\n        motor_7.spin(FORWARD)\n        motor_12.spin(FORWARD)\n        wait(20, MSEC)\n    if numberofcorners == 1:\n        number2 = motor_7.position(TURNS) * 19.5\n    if numberofcorners == 2:\n        number3 = motor_7.position(TURNS) * 19.5\n    numberofcorners = numberofcorners + 1\n\ndef one_of_my_finest_creations_1():\n    global numberofcorners, number1, number2, number3, number4, message1, message2, foundacorner, vexcode_brain_precision, vexcode_console_precision\n    brain.screen.clear_row(1)\n    brain.screen.set_cursor(brain.screen.row(), 1)\n    brain.screen.print(\"Phase 1: FIND DA FENCE\")\n    while not rightfront.pressing():\n        motor_7.set_velocity(50, PERCENT)\n        motor_12.set_velocity(40, PERCENT)\n        motor_7.spin(FORWARD)\n        motor_12.spin(FORWARD)\n        if frontright.pressing():\n            motor_7.spin_for(REVERSE, 1, TURNS)\n            motor_12.spin_for(REVERSE, 1, TURNS)\n            motor_12.spin(FORWARD)\n            wait(0.2, SECONDS)\n        wait(20, MSEC)\n\ndef when_started1():\n    global numberofcorners, number1, number2, number3, number4, message1, message2, foundacorner, vexcode_brain_precision, vexcode_console_precision\n    # switch to python\n    # open a github account and make sure to be able to login anywhere (accessible 2 factor authentication)\n    # see if you can implement each phase as custom blocks\n    for repeat_count in range(4):\n        one_of_my_finest_creations_1()\n        one_of_my_finest_creations_2()\n        one_of_my_finest_creations_3()\n        wait(20, MSEC)\n    brain.screen.clear_row(1)\n    brain.screen.set_cursor(brain.screen.row(), 1)\n    brain.screen.print(number2, precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    brain.screen.print(\"cm \")\n    brain.screen.print(number3, precision=6 if vexcode_brain_precision is None else vexcode_brain_precision)\n    brain.screen.print(\"cm\")\n\ndef onevent_message1_0():\n    global numberofcorners, number1, number2, number3, number4, message1, message2, foundacorner, vexcode_brain_precision, vexcode_console_precision\n    while not foundacorner:\n        wait(20, MSEC)\n\ndef onevent_message2_0():\n    global numberofcorners, number1, number2, number3, number4, message1, message2, foundacorner, vexcode_brain_precision, vexcode_console_precision\n    # refactor message1 and message2 to use a function to return the measure.\n    # also use both motors counters to verify that the number is accurate\n    while not foundacorner:\n        wait(20, MSEC)\n    # another option is to send a message to reset the turn counter and another message to store the turn value\n\n# system event handlers\nmessage1(onevent_message1_0)\nmessage2(onevent_message2_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","robotConfig":[{"port":[7],"name":"motor_7","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"motor_12","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"frontleft","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[4],"name":"frontright","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[9],"name":"rightfront","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[10],"name":"rightback","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.5","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}